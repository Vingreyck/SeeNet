import 'package:get/get.dart';
import '../config/api_config.dart';
import 'api_service.dart';

class AvaliacaoService extends GetxService {
  final ApiService _api = ApiService.instance;

  // ========== CRIAR AVALIA√á√ÉO ==========
  Future<int?> criarAvaliacao({
    String? titulo,
    String? descricao,
  }) async {
    try {
      print('üìù Criando avalia√ß√£o...');
      
      final response = await _api.post(
        'criarAvaliacao', // Usar a key do endpoints map
        {
          if (titulo != null) 'titulo': titulo,
          if (descricao != null) 'descricao': descricao,
        },
      );

      print('üì¶ Response recebido: $response');

      if (response['success'] == true) {
        // ‚úÖ CORRE√á√ÉO: Backend retorna { success: true, data: { message, id } }
        final data = response['data'];
        
        print('üìä Data extra√≠do: $data');
        print('üìä Tipo do data: ${data.runtimeType}');
        
        // O ID pode estar em diferentes locais
        dynamic avaliacaoIdDynamic;
        
        if (data is Map) {
          avaliacaoIdDynamic = data['id'];
          print('üîç ID encontrado (raw): $avaliacaoIdDynamic (tipo: ${avaliacaoIdDynamic.runtimeType})');
        }
        
        // Converter para int de forma segura
        int? avaliacaoId;
        if (avaliacaoIdDynamic != null) {
          if (avaliacaoIdDynamic is int) {
            avaliacaoId = avaliacaoIdDynamic;
          } else if (avaliacaoIdDynamic is String) {
            avaliacaoId = int.tryParse(avaliacaoIdDynamic);
          } else if (avaliacaoIdDynamic is List && avaliacaoIdDynamic.isNotEmpty) {
            // Caso o Knex retorne array [id]
            avaliacaoId = avaliacaoIdDynamic[0] is int 
                ? avaliacaoIdDynamic[0] 
                : int.tryParse(avaliacaoIdDynamic[0].toString());
          }
        }
        
        if (avaliacaoId != null) {
          print('‚úÖ Avalia√ß√£o criada com ID: $avaliacaoId');
          return avaliacaoId;
        } else {
          print('‚ö†Ô∏è Avalia√ß√£o criada, mas ID n√£o p√¥de ser convertido');
          print('üì¶ Valor raw do ID: $avaliacaoIdDynamic');
          return null;
        }
      } else {
        print('‚ùå Erro ao criar avalia√ß√£o: ${response['error']}');
        throw Exception(response['error'] ?? 'Erro ao criar avalia√ß√£o');
      }
    } catch (e) {
      print('‚ùå Exce√ß√£o ao criar avalia√ß√£o: $e');
      rethrow;
    }
  }

  // ========== FINALIZAR AVALIA√á√ÉO ==========
  Future<bool> finalizarAvaliacao(int avaliacaoId) async {
    try {
      print('üèÅ Finalizando avalia√ß√£o $avaliacaoId...');
      
      // Construir URL manualmente com o ID
      final response = await _api.put(
        'avaliacoes/$avaliacaoId/finalizar', // URL customizada
        {},
      );

      if (response['success'] == true) {
        print('‚úÖ Avalia√ß√£o finalizada');
        return true;
      } else {
        print('‚ùå Erro ao finalizar: ${response['error']}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exce√ß√£o ao finalizar avalia√ß√£o: $e');
      return false;
    }
  }

  // ========== SALVAR RESPOSTAS DE CHECKMARKS ==========
  Future<bool> salvarRespostas({
    required int avaliacaoId,
    required List<int> checkmarksMarcados,
  }) async {
    try {
      print('üíæ Salvando ${checkmarksMarcados.length} respostas...');
      
      final response = await _api.post(
        'avaliacoes/$avaliacaoId/respostas',
        {
          'checkmarks_marcados': checkmarksMarcados,
        },
      );

      if (response['success'] == true) {
        print('‚úÖ Respostas salvas');
        return true;
      } else {
        print('‚ùå Erro ao salvar respostas: ${response['error']}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exce√ß√£o ao salvar respostas: $e');
      return false;
    }
  }

  // ========== LISTAR MINHAS AVALIA√á√ïES ==========
  Future<Map<String, dynamic>> listarMinhasAvaliacoes({
    int page = 1,
    int limit = 20,
    String? status,
  }) async {
    try {
      print('üìã Listando avalia√ß√µes (p√°gina $page)...');
      
      Map<String, String> params = {
        'page': page.toString(),
        'limit': limit.toString(),
      };
      
      if (status != null) {
        params['status'] = status;
      }

      final response = await _api.get(
        'minhasAvaliacoes',
        queryParams: params,
      );

      if (response['success'] == true) {
        final data = response['data'];
        print('‚úÖ ${data['avaliacoes']?.length ?? 0} avalia√ß√µes carregadas');
        return data;
      } else {
        print('‚ùå Erro ao listar: ${response['error']}');
        throw Exception(response['error']);
      }
    } catch (e) {
      print('‚ùå Exce√ß√£o ao listar avalia√ß√µes: $e');
      rethrow;
    }
  }

  // ========== VER AVALIA√á√ÉO ESPEC√çFICA ==========
  Future<Map<String, dynamic>?> verAvaliacao(int avaliacaoId) async {
    try {
      print('üîç Buscando avalia√ß√£o $avaliacaoId...');
      
      final response = await _api.get('avaliacoes/$avaliacaoId');

      if (response['success'] == true) {
        final avaliacao = response['data']['avaliacao'];
        print('‚úÖ Avalia√ß√£o encontrada');
        return avaliacao;
      } else {
        print('‚ùå Erro ao buscar: ${response['error']}');
        return null;
      }
    } catch (e) {
      print('‚ùå Exce√ß√£o ao buscar avalia√ß√£o: $e');
      return null;
    }
  }

  // ========== CRIAR E SALVAR AVALIA√á√ÉO COMPLETA ==========
  // M√©todo helper que combina cria√ß√£o + salvamento de respostas
  Future<int?> criarAvaliacaoCompleta({
    String? titulo,
    String? descricao,
    required List<int> checkmarksMarcados,
  }) async {
    try {
      // 1. Criar avalia√ß√£o
      final avaliacaoId = await criarAvaliacao(
        titulo: titulo,
        descricao: descricao,
      );

      if (avaliacaoId == null) {
        throw Exception('Falha ao criar avalia√ß√£o - ID n√£o retornado');
      }

      // 2. Salvar respostas
      final respostasSalvas = await salvarRespostas(
        avaliacaoId: avaliacaoId,
        checkmarksMarcados: checkmarksMarcados,
      );

      if (!respostasSalvas) {
        print('‚ö†Ô∏è Avalia√ß√£o criada, mas respostas n√£o foram salvas');
      }

      return avaliacaoId;
    } catch (e) {
      print('‚ùå Erro ao criar avalia√ß√£o completa: $e');
      rethrow;
    }
  }
}