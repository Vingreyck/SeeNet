
import 'package:get/get.dart';
import '../models/diagnostico.dart';
import '../models/checkmark.dart';
import '../services/database_adapter.dart';
import '../services/gemini_service.dart';

class DiagnosticoController extends GetxController {
  RxList<Diagnostico> diagnosticos = <Diagnostico>[].obs;
  RxBool isLoading = false.obs;
  RxString statusMensagem = ''.obs;

  // Gerar diagn√≥stico usando Google Gemini
  Future<bool> gerarDiagnostico(int avaliacaoId, int categoriaId, List<Checkmark> checkmarksMarcados) async {
    try {
      isLoading.value = true;
      statusMensagem.value = 'Analisando problemas selecionados...';

      // Montar prompt baseado nos checkmarks marcados
      String prompt = _montarPromptComCheckmarks(checkmarksMarcados);
      
      statusMensagem.value = 'Consultando Google Gemini IA...';
      
      // Tentar com Google Gemini primeiro
      String? resposta = await GeminiService.gerarDiagnosticoComRetry(prompt);
      
      if (resposta != null) {
        statusMensagem.value = 'Salvando diagn√≥stico...';
        
        // Adicionar cabe√ßalho
        String respostaFinal = "*\n$resposta";
        
        // Criar diagn√≥stico
        Diagnostico diagnostico = Diagnostico(
          avaliacaoId: avaliacaoId,
          categoriaId: categoriaId,
          promptEnviado: prompt,
          respostaChatgpt: respostaFinal,
          resumoDiagnostico: _extrairResumo(resposta),
          statusApi: 'sucesso',
          dataCriacao: DateTime.now(),
        );
        
        // Salvar no SQLite
        bool salvou = await DatabaseAdapter.instance.salvarDiagnostico(diagnostico);
        
        if (salvou) {
          await carregarDiagnosticos(avaliacaoId);
          statusMensagem.value = 'Diagn√≥stico conclu√≠do com Google Gemini!';
          print(' Diagn√≥stico gerado com Google Gemini e salvo no banco');
          return true;
        } else {
          diagnosticos.add(diagnostico);
          statusMensagem.value = 'Diagn√≥stico gerado (erro ao salvar no banco)';
          print('Ô∏è Diagn√≥stico gerado mas n√£o salvo no banco SQLite');
          return true;
        }
      } else {
        // Se Gemini falhou, usar diagn√≥stico simulado
        print(' Google Gemini n√£o dispon√≠vel, criando diagn√≥stico simulado');
        statusMensagem.value = 'Gerando diagn√≥stico simulado...';
        _criarDiagnosticoSimulado(avaliacaoId, categoriaId, prompt);
        return true;
      }
      
    } catch (e) {
      print(' Erro geral ao gerar diagn√≥stico: $e');
      statusMensagem.value = 'Erro: ${e.toString()}';
      
      // Criar diagn√≥stico de erro como fallback
      _criarDiagnosticoErro(avaliacaoId, categoriaId, e.toString());
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  // Montar prompt otimizado para o Gemini
  String _montarPromptComCheckmarks(List<Checkmark> checkmarksMarcados) {
    if (checkmarksMarcados.isEmpty) {
      return "N√£o foram identificados problemas espec√≠ficos na an√°lise t√©cnica. Forne√ßa orienta√ß√µes gerais de manuten√ß√£o preventiva.";
    }

    String prompt = "RELAT√ìRIO T√âCNICO DE PROBLEMAS IDENTIFICADOS:\n\n";
    
    for (int i = 0; i < checkmarksMarcados.length; i++) {
      var checkmark = checkmarksMarcados[i];
      prompt += "PROBLEMA ${i + 1}:\n";
      prompt += "‚Ä¢ T√≠tulo: ${checkmark.titulo}\n";
      
      if (checkmark.descricao != null && checkmark.descricao!.isNotEmpty) {
        prompt += "‚Ä¢ Descri√ß√£o: ${checkmark.descricao}\n";
      }
      
      // PONTO PRINCIPAL: Usar o prompt espec√≠fico do checkmark
      if (checkmark.promptChatgpt.isNotEmpty) {
        prompt += "‚Ä¢ Contexto t√©cnico: ${checkmark.promptChatgpt}\n";
      }
      
      prompt += "\n";
    }
    
    prompt += "TAREFA:\n";
    prompt += "Analise os problemas listados acima e forne√ßa um diagn√≥stico t√©cnico completo. ";
    prompt += "Considere que pode haver correla√ß√£o entre os problemas. ";
    prompt += "Forne√ßa solu√ß√µes pr√°ticas, come√ßando pelas mais simples e eficazes.";
    
    return prompt;
  }

  // Criar diagn√≥stico simulado quando Gemini n√£o est√° dispon√≠vel
  void _criarDiagnosticoSimulado(int avaliacaoId, int categoriaId, String prompt) {
    String _gerarDiagnosticoSimuladoInteligente(String prompt) {
    DateTime agora = DateTime.now();
    
    // Analisar o prompt para personalizar a resposta
    List<String> problemas = _extrairProblemasDoPrompt(prompt);
    String categoria = _identificarCategoriaDoPrompt(prompt);
    
    return """ **DIAGN√ìSTICO R√ÅPIDO - ${categoria.toUpperCase()}**

   **PROBLEMAS IDENTIFICADOS:** ${problemas.join(', ')}

  ${_gerarSolucoesPorCategoria(categoria)}

   **PR√ìXIMOS PASSOS:**
  ‚Ä¢ Execute na ordem apresentada
  ‚Ä¢ Anote o que funcionou ou n√£o
  ‚Ä¢ Se nada resolver, ligue para suporte com estas informa√ß√µes

  ---
   Diagn√≥stico gerado em ${_formatarDataHora(agora)}

   **QUER DIAGN√ìSTICOS PERSONALIZADOS?**
  Configure Google Gemini em: https://makersuite.google.com/app/apikey
  ‚Ä¢ Gratuito e f√°cil de configurar
  ‚Ä¢ Diagn√≥sticos espec√≠ficos para cada problema
  ‚Ä¢ Respostas ainda mais precisas

   SeeNet v1.0 - Solu√ß√µes Diretas e Pr√°ticas""";
  }
  }

  // Gerar diagn√≥stico simulado inteligente baseado no prompt
  String _gerarDiagnosticoSimuladoInteligente(String prompt) {
    DateTime agora = DateTime.now();
    
    // Analisar o prompt para personalizar a resposta
    List<String> problemas = _extrairProblemasDoPrompt(prompt);
    String categoria = _identificarCategoriaDoPrompt(prompt);
    
    return """ **DIAGN√ìSTICO T√âCNICO SIMULADO - ${categoria.toUpperCase()}**

 **AN√ÅLISE REALIZADA:**
Sistema em modo simulado. Foram identificados ${problemas.length} problema(s): ${problemas.join(', ')}.

 **CAUSA PROV√ÅVEL:**
${_gerarCausasPorCategoria(categoria)}

üõ† **SOLU√á√ïES RECOMENDADAS:**

${_gerarSolucoesPorCategoria(categoria)}

Ô∏è **SE PROBLEMA PERSISTIR:**
${_gerarInstrucoesSuporte(categoria)}

 **PREVEN√á√ÉO FUTURA:**
${_gerarDicasManutencao(categoria)}

 **PR√ìXIMOS PASSOS:**
1. Execute as solu√ß√µes na ordem apresentada
2. Documente os resultados de cada teste
3. Se nenhuma solu√ß√£o funcionar, entre em contato com suporte t√©cnico
4. Mantenha este diagn√≥stico para refer√™ncia futura

---
 Diagn√≥stico simulado gerado em ${_formatarDataHora(agora)}

 **Para diagn√≥sticos reais com IA:**
Configure Google Gemini gratuitamente em: https://makersuite.google.com/app/apikey
‚Ä¢ 15 requisi√ß√µes por minuto
‚Ä¢ Qualidade profissional
‚Ä¢ An√°lise personalizada dos seus problemas espec√≠ficos

 Sistema SeeNet v1.0 - Diagn√≥stico T√©cnico Inteligente""";
  }

  // M√©todos auxiliares para o diagn√≥stico simulado
  List<String> _extrairProblemasDoPrompt(String prompt) {
    List<String> problemas = [];
    List<String> linhas = prompt.split('\n');
    
    for (String linha in linhas) {
      if (linha.contains('‚Ä¢ T√≠tulo:')) {
        String problema = linha.replaceAll('‚Ä¢ T√≠tulo:', '').trim();
        if (problema.isNotEmpty) {
          problemas.add(problema);
        }
      }
    }
    
    return problemas.isNotEmpty ? problemas : ['problemas gerais de conectividade'];
  }

  String _identificarCategoriaDoPrompt(String prompt) {
    String promptLower = prompt.toLowerCase();
    
    if (promptLower.contains('lentid√£o') || promptLower.contains('velocidade') || 
        promptLower.contains('ping') || promptLower.contains('lat√™ncia')) {
      return 'lentid√£o';
    } else if (promptLower.contains('iptv') || promptLower.contains('canal') || 
               promptLower.contains('buffering') || promptLower.contains('tv')) {
      return 'iptv';
    } else if (promptLower.contains('aplicativo') || promptLower.contains('app') || 
               promptLower.contains('error code')) {
      return 'aplicativos';
    }
    
    return 'conectividade geral';
  }

  String _gerarCausasPorCategoria(String categoria) {
    switch (categoria) {
      case 'lentid√£o':
        return """‚Ä¢ Sobrecarga na infraestrutura de rede local
‚Ä¢ Interfer√™ncia no sinal WiFi (canal 2.4GHz congestionado)
‚Ä¢ Degrada√ß√£o na qualidade do sinal da operadora
‚Ä¢ Configura√ß√µes inadequadas do roteador ou modem
‚Ä¢ Excesso de dispositivos conectados simultaneamente
‚Ä¢ Problemas f√≠sicos nos cabos de rede""";
        
      case 'iptv':
        return """‚Ä¢ Largura de banda insuficiente para streaming em alta qualidade
‚Ä¢ Problemas na codifica√ß√£o ou transmiss√£o dos canais
‚Ä¢ Lat√™ncia alta da rede causando perda de pacotes
‚Ä¢ Configura√ß√µes incorretas do decodificador ou Smart TV
‚Ä¢ Interfer√™ncia na transmiss√£o de dados multicast
‚Ä¢ Problemas no servidor de conte√∫do da operadora""";
        
      case 'aplicativos':
        return """‚Ä¢ Conectividade intermitente com servidores dos aplicativos
‚Ä¢ Cache corrompido ou dados tempor√°rios inv√°lidos
‚Ä¢ Vers√µes desatualizadas dos aplicativos instalados
‚Ä¢ Bloqueios de firewall ou configura√ß√µes incorretas de proxy
‚Ä¢ Problemas na resolu√ß√£o de DNS impedindo acesso aos servi√ßos
‚Ä¢ Incompatibilidade entre app e sistema operacional""";
        
      default:
        return """‚Ä¢ Problemas gerais na infraestrutura de conectividade
‚Ä¢ Configura√ß√µes de rede inadequadas ou desatualizadas
‚Ä¢ Interfer√™ncias externas afetando a qualidade do sinal
‚Ä¢ Equipamentos de rede necessitando manuten√ß√£o ou substitui√ß√£o
‚Ä¢ Problemas na configura√ß√£o de protocolos de rede""";
    }
  }

 String _gerarSolucoesPorCategoria(String categoria) {
  switch (categoria) {
    case 'lentid√£o':
      return """ **SOLU√á√ÉO R√ÅPIDA (2 min):**
1.  Desligue o roteador da tomada por 30 segundos
2.  Ligue novamente e aguarde 2 minutos
3.  Teste a velocidade no celular perto do roteador

 **SE N√ÉO RESOLVER (5 min):**
1.  Troque o canal WiFi para 1, 6 ou 11 nas configura√ß√µes
2.  Teste cabo direto do modem ao computador
3.  Fa√ßa teste de velocidade em speedtest.net

Ô∏è **AINDA COM PROBLEMA:**
"Ligue para operadora informando: velocidade testada, hor√°rio do teste e se melhora com cabo"

 **DICA R√ÅPIDA:**
Reinicie o roteador toda semana para manter performance""";
        
    case 'iptv':
      return """ **SOLU√á√ÉO R√ÅPIDA (2 min):**
1.  Desligue a TV box da tomada por 1 minuto
2.  Ligue novamente e aguarde inicializar
3.  Teste um canal diferente

 **SE N√ÉO RESOLVER (5 min):**
1.  Use cabo ethernet na TV box (n√£o WiFi)
2.  Feche apps desnecess√°rios em outros dispositivos
3.  Teste em hor√°rio diferente (manh√£/noite)

Ô∏è **AINDA COM PROBLEMA:**
"Ligue para operadora informando: quais canais travam, hor√°rio do problema e se acontece todo dia"

 **DICA R√ÅPIDA:**
Reserve 25Mbps da internet s√≥ para a IPTV""";
        
    case 'aplicativos':
      return """ **SOLU√á√ÉO R√ÅPIDA (2 min):**
1.  Force fechar o app completamente
2. Ô∏è Limpe o cache do app nas configura√ß√µes
3.  Abra o app novamente

 **SE N√ÉO RESOLVER (5 min):**
1.  Reinicie o dispositivo completamente
2.  Teste usando dados m√≥veis (4G)
3.  Atualize o app na loja

Ô∏è **AINDA COM PROBLEMA:**
"Ligue para operadora informando: nome do app, c√≥digo de erro (se aparecer) e se funciona com 4G"

 **DICA R√ÅPIDA:**
Atualize os apps toda semana para evitar problemas""";
        
    default:
      return """ **SOLU√á√ÉO R√ÅPIDA (2 min):**
1.  Reinicie todos os equipamentos
2.  Teste em dispositivo diferente
3.  Aguarde 5 minutos e teste novamente

 **SE N√ÉO RESOLVER (5 min):**
1.  Verifique todos os cabos
2.  Teste conex√£o em local diferente
3.  Anote hor√°rio exato do problema

Ô∏è **AINDA COM PROBLEMA:**
"Ligue para operadora com hor√°rio exato e descri√ß√£o do problema"

 **DICA R√ÅPIDA:**
Mantenha equipamentos sempre atualizados""";
  }
}

  String _gerarInstrucoesSuporte(String categoria) {
    switch (categoria) {
      case 'lentid√£o':
        return """Entre em contato com a operadora informando:
‚Ä¢ Resultados completos dos testes de velocidade com hor√°rios
‚Ä¢ Compara√ß√£o detalhada entre conex√£o cabeada e WiFi
‚Ä¢ Dispositivos espec√≠ficos e locais da resid√™ncia afetados
‚Ä¢ Hist√≥rico de todas as solu√ß√µes j√° testadas
‚Ä¢ Hor√°rios do dia com melhor e pior performance""";
        
      case 'iptv':
        return """Entre em contato com suporte t√©cnico da IPTV informando:
‚Ä¢ Canais espec√≠ficos com problema e hor√°rios de ocorr√™ncia
‚Ä¢ Mensagens de erro exatas exibidas na tela
‚Ä¢ Resultados dos testes de largura de banda
‚Ä¢ Modelo e vers√£o do firmware do decodificador/Smart TV
‚Ä¢ Configura√ß√µes de rede testadas (cabeada vs WiFi)""";
        
      case 'aplicativos':
        return """Entre em contato com suporte dos apps ou operadora informando:
‚Ä¢ Lista espec√≠fica de aplicativos afetados
‚Ä¢ C√≥digos de erro exatos apresentados pelos apps
‚Ä¢ Vers√µes dos aplicativos e sistema operacional
‚Ä¢ Resultados detalhados dos testes (cache, reinstala√ß√£o)
‚Ä¢ Comportamento em redes diferentes (WiFi vs dados m√≥veis)""";
        
      default:
        return """Entre em contato com suporte t√©cnico fornecendo:
‚Ä¢ Descri√ß√£o cronol√≥gica detalhada dos problemas
‚Ä¢ Hor√°rios espec√≠ficos e padr√µes de ocorr√™ncia
‚Ä¢ Lista completa de equipamentos e dispositivos envolvidos
‚Ä¢ Hist√≥rico detalhado de todos os testes e solu√ß√µes tentados
‚Ä¢ Resultados de ping, traceroute e testes de estabilidade""";
    }
  }

  String _gerarDicasManutencao(String categoria) {
    switch (categoria) {
      case 'lentid√£o':
        return """‚Ä¢ Execute testes de velocidade semanalmente e mantenha hist√≥rico
‚Ä¢ Atualize firmware do roteador a cada 2-3 meses
‚Ä¢ Evite sobrecarga simult√¢nea de muitos dispositivos
‚Ä¢ Posicione roteador em local central, elevado e bem ventilado
‚Ä¢ Use cabos Cat6 ou superiores para conex√µes cr√≠ticas
‚Ä¢ Monitore e gerencie dispositivos conectados √† rede""";
        
      case 'iptv':
        return """‚Ä¢ Reserve largura de banda dedicada para IPTV (m√≠nimo 25Mbps)
‚Ä¢ Configure QoS no roteador priorizando tr√°fego de v√≠deo/streaming
‚Ä¢ Mantenha decodificador em ambiente bem ventilado
‚Ä¢ Atualize firmware do decodificador mensalmente
‚Ä¢ Prefira sempre conex√£o cabeada para dispositivos de IPTV
‚Ä¢ Monitore qualidade dos canais em diferentes hor√°rios""";
        
      case 'aplicativos':
        return """‚Ä¢ Mantenha aplicativos sempre atualizados para vers√µes mais recentes
‚Ä¢ Execute limpeza de cache dos apps semanalmente
‚Ä¢ Evite instalar aplicativos de fontes n√£o confi√°veis
‚Ä¢ Configure backup autom√°tico de configura√ß√µes importantes
‚Ä¢ Monitore e gerencie o consumo de dados e armazenamento
‚Ä¢ Revise permiss√µes dos aplicativos periodicamente""";
        
      default:
        return """‚Ä¢ Execute manuten√ß√£o preventiva trimestral em todos os equipamentos
‚Ä¢ Monitore performance e estabilidade da rede semanalmente
‚Ä¢ Mantenha documenta√ß√£o atualizada de todas as configura√ß√µes
‚Ä¢ Implemente rotinas de backup para configura√ß√µes cr√≠ticas
‚Ä¢ Capacite usu√°rios sobre uso adequado dos recursos de rede
‚Ä¢ Mantenha invent√°rio atualizado de equipamentos e vers√µes""";
    }
  }

  // Carregar diagn√≥sticos de uma avalia√ß√£o
  Future<void> carregarDiagnosticos(int avaliacaoId) async {
    try {
      diagnosticos.value = await DatabaseAdapter.instance.getDiagnosticosPorAvaliacao(avaliacaoId);
      print(' ${diagnosticos.length} diagn√≥sticos carregados do banco');
    } catch (e) {
      print(' Erro ao carregar diagn√≥sticos: $e');
    }
  }

  // Extrair resumo do diagn√≥stico
  String _extrairResumo(String resposta) {
    List<String> linhas = resposta.split('\n');
    
    // Procurar linha com diagn√≥stico
    for (String linha in linhas) {
      if (linha.contains('DIAGN√ìSTICO') || linha.contains('AN√ÅLISE')) {
        String resumo = linha.replaceAll(RegExp(r'[*]'), '').trim();
        if (resumo.length > 15) {
          return resumo.length > 120 ? '${resumo.substring(0, 120)}...' : resumo;
        }
      }
    }
    
    // Se n√£o encontrou, usar primeiras linhas √∫teis
    List<String> linhasUteis = linhas
        .where((linha) => linha.trim().isNotEmpty && 
               !linha.startsWith('---') && 
               !linha.startsWith('**'))
        .take(2)
        .toList();
    
    String resumo = linhasUteis.join(' ').trim();
    return resumo.length > 120 ? '${resumo.substring(0, 120)}...' : resumo;
  }

  // Criar diagn√≥stico de erro
  void _criarDiagnosticoErro(int avaliacaoId, int categoriaId, String erro) {
    String diagnosticoErro = """ **ERRO NO SISTEMA DE DIAGN√ìSTICO**

N√£o foi poss√≠vel gerar o diagn√≥stico automaticamente devido a um erro t√©cnico.

**Detalhes do erro:** $erro

**A√ß√µes recomendadas imediatas:**
1. Verifique sua conex√£o com a internet
2. Tente realizar o diagn√≥stico novamente em alguns minutos
3. Se o problema persistir, execute as verifica√ß√µes b√°sicas abaixo

**VERIFICA√á√ïES B√ÅSICAS EMERGENCIAIS:**

 **Reinicializa√ß√£o Completa:**
‚Ä¢ Desligue roteador e modem por 30 segundos
‚Ä¢ Ligue primeiro o modem, aguarde 2 minutos
‚Ä¢ Ligue o roteador e aguarde inicializa√ß√£o

 **Teste de Conectividade:**
‚Ä¢ Teste velocidade em speedtest.net
‚Ä¢ Verifique conex√£o cabeada vs WiFi
‚Ä¢ Teste em dispositivos diferentes

 **Verifica√ß√£o F√≠sica:**
‚Ä¢ Confira todos os cabos de rede
‚Ä¢ Procure por conectores soltos
‚Ä¢ Verifique LEDs dos equipamentos

 **Suporte T√©cnico:**
Se os problemas persistirem ap√≥s estas verifica√ß√µes, entre em contato com o suporte t√©cnico informando:
‚Ä¢ Este c√≥digo de erro: ${erro.hashCode.abs()}
‚Ä¢ Hor√°rio da ocorr√™ncia: ${DateTime.now()}
‚Ä¢ Descri√ß√£o dos problemas identificados
‚Ä¢ Resultados dos testes b√°sicos realizados

---
Ô∏è Este √© um diagn√≥stico de emerg√™ncia gerado pelo sistema.
Para diagn√≥sticos completos, configure uma IA como Google Gemini.""";

    Diagnostico diagnostico = Diagnostico(
      avaliacaoId: avaliacaoId,
      categoriaId: categoriaId,
      promptEnviado: "Erro no sistema",
      respostaChatgpt: diagnosticoErro,
      resumoDiagnostico: "Erro no sistema: ${erro.length > 50 ? erro.substring(0, 50) + '...' : erro}",
      statusApi: 'erro',
      erroApi: erro,
      dataCriacao: DateTime.now(),
    );
    
    diagnosticos.add(diagnostico);
    print(' Diagn√≥stico de erro criado como fallback final');
  }

  // M√©todo auxiliar para formatar data e hora
  String _formatarDataHora(DateTime data) {
    return '${data.day.toString().padLeft(2, '0')}/${data.month.toString().padLeft(2, '0')}/${data.year} √†s ${data.hour.toString().padLeft(2, '0')}:${data.minute.toString().padLeft(2, '0')}';
  }

  // Limpar diagn√≥sticos
  void limparDiagnosticos() {
    diagnosticos.clear();
    statusMensagem.value = '';
    print(' Diagn√≥sticos limpos da mem√≥ria');
  }

  // Verificar se h√° diagn√≥sticos
  bool get temDiagnosticos => diagnosticos.isNotEmpty;

  // Obter √∫ltimo diagn√≥stico
  Diagnostico? get ultimoDiagnostico {
    if (diagnosticos.isEmpty) return null;
    return diagnosticos.first;
  }

  // Contar diagn√≥sticos por status
  int contarPorStatus(String status) {
    return diagnosticos.where((d) => d.statusApi == status).length;
  }

  // Limpar apenas status
  void limparStatus() {
    statusMensagem.value = '';
  }

  // M√©todo para testar conectividade do Gemini
  Future<bool> testarGemini() async {
    print(' Iniciando teste de conectividade com Google Gemini...');
    return await GeminiService.testarConexao();
  }

  // Obter informa√ß√µes sobre o Gemini
  Map<String, String> get infoGemini => GeminiService.getInfo();

  // Verificar se Gemini est√° configurado
  bool get geminiConfigurado => GeminiService.isConfigured;

  // Debug - mostrar configura√ß√µes
  void debugConfiguracoes() {
    GeminiService.debugConfiguracoes();
  }
}